<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>芯片设计工程师 on Wenhui&#39;s Rotten Pen</title>
    <link>https://wenhui.space/categories/%E8%8A%AF%E7%89%87%E8%AE%BE%E8%AE%A1%E5%B7%A5%E7%A8%8B%E5%B8%88/</link>
    <description>Recent content in 芯片设计工程师 on Wenhui&#39;s Rotten Pen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 24 Feb 2020 17:03:00 +0800</lastBuildDate>
    
	<atom:link href="https://wenhui.space/categories/%E8%8A%AF%E7%89%87%E8%AE%BE%E8%AE%A1%E5%B7%A5%E7%A8%8B%E5%B8%88/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>如何更好的解决RTL编译时依赖关系问题</title>
      <link>https://wenhui.space/post/digital_designer/resolve_dependencies_rtl_compile/</link>
      <pubDate>Mon, 24 Feb 2020 17:03:00 +0800</pubDate>
      
      <guid>https://wenhui.space/post/digital_designer/resolve_dependencies_rtl_compile/</guid>
      <description>本文 主要介绍一种有效解决RTL编译时依赖关系问题的方法。 版本 说明 0.1 初版发布 关于include 一般在文件中会用include来加载依赖的文件，</description>
    </item>
    
    <item>
      <title>verilog的编码风格</title>
      <link>https://wenhui.space/post/digital_designer/verilog_coding_styleguide/</link>
      <pubDate>Wed, 19 Feb 2020 14:35:00 +0800</pubDate>
      
      <guid>https://wenhui.space/post/digital_designer/verilog_coding_styleguide/</guid>
      <description>本文 主要介绍了一些verilog的编码风格准则。 版本 说明 0.1 初版发布 参考 RTL Coding Styles That Yield Simulation and Synthesis Mismatches（链接：https://pan.b</description>
    </item>
    
    <item>
      <title>关于Verilog中的case、casex、casez</title>
      <link>https://wenhui.space/post/digital_designer/about_verilog_cases/</link>
      <pubDate>Tue, 18 Feb 2020 10:35:00 +0800</pubDate>
      
      <guid>https://wenhui.space/post/digital_designer/about_verilog_cases/</guid>
      <description>本文 主要介绍Verilog语法中case，casex，casez的区别，以及建议使用方法。 版本 说明 0.1 初版发布 关于case 代码： 1 2 3 4 5 6 7</description>
    </item>
    
    <item>
      <title>Verilog中获取随机数</title>
      <link>https://wenhui.space/post/digital_designer/random_in_verilog/</link>
      <pubDate>Fri, 17 Jan 2020 10:12:00 +0800</pubDate>
      
      <guid>https://wenhui.space/post/digital_designer/random_in_verilog/</guid>
      <description>本文 主要介绍一种verilog语言中获取随机数的方法。 版本 说明 0.1 初版发布 代码展示 设计代码 1 2 3 4 5 function [31:0] get_random; input signed [31:0] min_num; input signed [31:0] max_num; get_random = min_num + {$random}%(max_num-min_num+1); endfunction // get_random 验证</description>
    </item>
    
    <item>
      <title>verilog编码的三大利器</title>
      <link>https://wenhui.space/post/digital_designer/verilog_coding_three_tools/</link>
      <pubDate>Thu, 16 Jan 2020 00:04:00 +0800</pubDate>
      
      <guid>https://wenhui.space/post/digital_designer/verilog_coding_three_tools/</guid>
      <description>本文 主要介绍辅助verilog编码的三款工具，简化编码工作。 版本 说明 0.1 初版发布 三大利器 Emacs verilog-mode 的使用 代码预处理工具ep3的使用 verilog中r</description>
    </item>
    
  </channel>
</rss>